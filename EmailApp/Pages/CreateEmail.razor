@page "/create-email"
@inject IEmailService EmailService
@using System.ComponentModel.DataAnnotations
@using EmailApp.Models
@using EmailApp.Services
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<h3>Create New Email</h3>

<EditForm Model="@email" OnValidSubmit="@HandleValidSubmit" class="form-horizontal">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

    <div class="form-group row">
        <label for="fromEmail" class="col-sm-2 col-form-label">From:</label>
        <div class="col-sm-10">
            <InputText id="fromEmail" class="form-control" @bind-Value="email.FromEmail" />
            <ValidationMessage For="@(() => email.FromEmail)" class="text-danger" />
        </div>
    </div>
    <div class="form-group row">
        <label for="toEmail" class="col-sm-2 col-form-label">To:</label>
        <div class="col-sm-10">
            <InputText id="toEmail" class="form-control" @bind-Value="email.ToEmail" />
            <ValidationMessage For="@(() => email.ToEmail)" class="text-danger" />
        </div>
    </div>
    <div class="form-group row">
        <label for="ccEmails" class="col-sm-2 col-form-label">CC:</label>
        <div class="col-sm-10">
            <InputText id="ccEmails" class="form-control" @bind-Value="email.CcEmails" />
        </div>
    </div>
    <div class="form-group row">
        <label for="subject" class="col-sm-2 col-form-label">Subject:</label>
        <div class="col-sm-10">
            <InputText id="subject" class="form-control" @bind-Value="email.Subject" />
            <ValidationMessage For="@(() => email.Subject)" class="text-danger" />
        </div>
    </div>
    <div class="form-group row">
        <label for="importance" class="col-sm-2 col-form-label">Importance:</label>
        <div class="col-sm-10">
            <InputSelect id="importance" class="form-control" @bind-Value="email.Importance">
                <option value="Low">Low</option>
                <option value="Normal">Normal</option>
                <option value="High">High</option>
            </InputSelect>
        </div>
    </div>
    <div class="form-group row">
        <label for="content" class="col-sm-2 col-form-label">Content:</label>
        <div class="col-sm-10">
            <InputTextArea id="content" class="form-control" @bind-Value="email.Content"></InputTextArea>
            <ValidationMessage For="@(() => email.Content)" class="text-danger" />
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-10 offset-sm-2">
            <button type="submit" class="btn btn-primary">Send</button>
            <button type="button" class="btn btn-secondary" @onclick="HandleCancel">Cancel</button>
        </div>
    </div>
</EditForm>

@code {
    private Email email = new Email();

    private async Task HandleValidSubmit()
    {
        await EmailService.CreateEmailAsync(email);
        Navigation.NavigateTo("/email-history");
    }

    private async Task HandleCancel()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirmCancel", "Are you sure you want to cancel?");
        if (confirmed)
        {
            email = new Email();
        }
    }
}
