@page "/email-history/{pageNumber:int?}"
@using EmailApp.Models
@using EmailApp.Services
@using Microsoft.Extensions.Options
@inject IEmailService EmailService
@inject IJSRuntime JSRuntime

<h3>Email History</h3>

@if (isLoading)
{
    <div class="alert alert-info" role="alert">
        Loading...
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}
else if (emails == null || emails.Count == 0)
{
    <div class="alert alert-warning" role="alert">
        No emails found.
    </div>
}
else
{
    if (paginatedEmails != null)
    {
        <div class="list-group">
            @foreach (var email in paginatedEmails)
            {
                <div class="list-group-item d-flex justify-content-between align-items-center">
                    <span>Subject: @email.Subject</span>
                    <button class="btn btn-primary btn-sm" @onclick="() => ShowEmailDetails(email)">Show More</button>
                </div>
            }
        </div>
    }
    <Pagination TotalItems="emails.Count" ItemsPerPage="ItemsPerPage" CurrentPage="CurrentPage" OnPageChanged="OnPageChanged" />
}

<!-- Email Details Modal -->
<div class="modal fade" id="emailModal" tabindex="-1" role="dialog" aria-labelledby="emailModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="emailModalLabel">Email Details</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideEmailModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if (selectedEmail != null)
                {
                    <p><strong>From:</strong> @selectedEmail.FromEmail</p>
                    <p><strong>To:</strong> @selectedEmail.ToEmail</p>
                    @if (selectedEmail.CcEmails.Any())
                    {
                        <p><strong>CC:</strong> @string.Join(", ", selectedEmail.CcEmails)</p>
                    }
                    <p><strong>Subject:</strong> @selectedEmail.Subject</p>
                    <p><strong>Importance:</strong> @selectedEmail.Importance</p>
                    <p><strong>Content:</strong> @selectedEmail.Content</p>
                    <small class="text-muted">Created: @selectedEmail.CreatedDate</small>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="HideEmailModal">Close</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Email>? emails;
    private List<Email>? paginatedEmails;
    private Email? selectedEmail;
    private int CurrentPage = 1;
    private int ItemsPerPage;
    private bool isLoading = true;
    private string? errorMessage;

    [Parameter]
    public int? PageNumber { get; set; }

    [Inject]
    private IOptions<EmailSettings>? EmailSettings { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;
        errorMessage = null;

        ItemsPerPage = EmailSettings?.Value.ItemsPerPage ?? default;

        if (PageNumber.HasValue)
        {
            CurrentPage = PageNumber.Value;
        }
        else
        {
            CurrentPage = 1;
        }

        try
        {
            emails = await EmailService.GetEmailsAsync();
            PaginateEmails();
        }
        catch (Exception ex)
        {
            errorMessage = "Error loading emails. Please try again later.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void PaginateEmails()
    {
        paginatedEmails = emails?.Skip((CurrentPage - 1) * ItemsPerPage).Take(ItemsPerPage).ToList();
    }

    private async Task ShowEmailDetails(Email email)
    {
        selectedEmail = email;
        await JSRuntime.InvokeVoidAsync("showModal", "emailModal");
    }

    private async Task HideEmailModal()
    {
        selectedEmail = null;
        await JSRuntime.InvokeVoidAsync("hideModal", "emailModal");
    }

    private void OnPageChanged(int pageNumber)
    {
        CurrentPage = pageNumber;
        PaginateEmails();
    }
}
